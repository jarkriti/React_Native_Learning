
1) React JS
Reactjs- JS library for building user interfaces.

React is actually user for maintaining trees of components and used for checking if something has changed.
React DOM is actually responsible for rendering react page on real DOM.

React can be used on any platform.

2) What is react native

React native is a collection of special elements. It knows how to compile these elements to native widgets based on platform
IOS or android.
It gives these widgets that can be compiled to native language.

It gives access to native platform APIs like camera so that common tasks can be done.

It gives tools to connect JS code to native platform code.

Most of the code is written in JS. But React native also gives capability to write code in native language and connect it with JS 

3) React JS + React native gives capability to compile a real native mobile app.

4) How it works.

So we have special component provided by react native like view and text.

const App = props =>{
    return (
        <View>
            <Text> Hello There </Text>  
        </View>
    )
}

this code is compiled to react native code. JS code is not compiled but the views are compiled to react native app.
React native maps reusable component to respective platform equivalents.

The logic part written in JS like HTTP calls are not converted to the react native code. It is running in the app hosted 
by React Native app and is not compiled. It can talk with the native code for making app work according to the logic.
JS code runs inside the app in a virtual machine and talks with native platform features.

5) React Native CLI and Expo CLI tool

Expo CLI: third party service(free)
Managed App Development
Lots of convenience and utility
Simplifies Developmentyou are limited to expo ecosystem.

React Native CLI:
By recat native team
Bare bone develpment only a basic setup is availble.
almost co convenience or utility features
full flexibility. Intgrate with native code.

6) How expo works
you will have native device simulator and your app configuration and code.
On native simulator install expo client app that acts as wrapper for your react native app code.

Expo app can be published in app store.

7) Steps to install and run project

a) Install expo-cli
sudo npm install expo-cli --global

b) Go to folder where you want to create your project

expo init rn-first-app
Go with blank template

Navigate to your folder

cd rn-first-app/

8) useState: React hook

const [outputText, setOutputText] = useState('Open up App.js to start working on your app!')

Here outputText is a variable asisgned an initial state.
setOutputText function will be used to set state of outputText variable.
Whenever setOutputText function will be called page will be re rendered.

onPress function is used instead of onClick for tracking button click event

9) Setup android simulator

10) Setup IOS simulator


============================================================================

BASICS

1) Core components

Built in react native components. translation to native UI widgets is provided by react native.
Ex. View, Text, Button, Touchable, TextInput, Image

UI custom componets can be made from core components.

Ex.

const myTitle = props =>{
    return (
        <View>  
            <Text>{props.title}</Text>
        </View>
    );
    )
}

2) Stylesheet

There is no CSS

There are inline styles and stylesheet objects.

It is written in JS

It is based on CSS syntax but only subset of properties and features are supoorted.

Stylesheet objects is preferred.

3) Text can only be written inside Text component.

4) View component is mainly used for styling and layouting.

5) TextInput componnet is used for taking an input from user. Placeholder can be added.

6) Button element is also present with title property for button display text.

7) Style in react native elements is done by assigning JS object to style property.
 JS object has property names similar to CSS.

8) By default view uses flexbox. We can apply fexDirection to view. It can be row or column.

9) View prganizes content by default from top to bottom in a flexbox.

---------------------

flexbox BASICS
1) By default all views have flexbox layout.
2) Default their direct is column.
3) There are two axis. Main axis and cross axis. Main axis is the direction of flexbox axis and the other one is cross axis.
4) justifyContent property is used for aligning contents in main axis.
5) alignItems is used for aligning items in cross axis.
6) By default, children item of flex view take the cross axis property of parent component. Like if parent view has
    direction row and column property as stretch then child components will take that value.
7) For setting the child property across the main axis, flex is used. It has numeric value and all child with flex property are taking
    relative values. Like if there are two child component with flex 1 and 2, then first one will take 1/3 of space other will take
    2/3 of space.
8) By default if no justifyContent or alignItems property is present, components take only needed space for their content.

-------------------------

Inline styles make code complex when code becomes bulky.
Stylesheet.create should be used for creating stylesheet objects because it also helps in performance optimization. 
Also, it suggests if any property goes wrong.

-----------------------------------------------------------------------------------------------------------------------------

 Basics of flexbox
 stylesheet using stylesheet.create

    <View style={styles.screen}>
      <View style={styles.inputContainer}>
        <TextInput placeholder="Course Goal" style={styles.input} />
        <Button title="ADD" />
      </View>
      <View>

      </View>
    </View>

    flexbox example
      <View
      style={{padding: 50, flexDirection: 'row', width: '100%', height: 300, justifyContent: 'space-around', alignItems:'stretch'}}>
        <View style={{backgroundColor:'red', flex:1,justifyContent:'center',alignItems:'center'}}></View>
        <View style={{backgroundColor:'blue', flex:1,justifyContent:'center',alignItems:'center'}}></View>
        <View style={{backgroundColor:'green', flex:2,justifyContent:'center',alignItems:'center'}}></View>
      </View>
    );

    -----------------------------------------------------------------------------------------------------------------------------


    1. TextInput is used for taking user input.

    All the data can be managed using react hooks.

    useSate hook is used for creating initial state and passing a function to set that state value.

    To store user input, first take a state variable using hooks.

     const [enteredGoal,setEnteredGoal] = useState('');
     Here enteredGoal is state variable and setEnteredGoal is the function used for setting enteredGoal.
     Initial state is empty.

    TextInput has property called as onChangeText. Pass a fucntion to execute on change of text.

    const goalInputHandler = enteredText => {
        setEnteredGoal(enteredText); //Here the state will change to the entered goal value.
    };

Two way binding is required. Whenever user enters value state should change and that state value should be reflected in textbox.

Pass value parameter as state for that.

2. Button has title property that tells what should be displayed on it.
onPress property tells what should be done onPress of button.

bind can be used for pasisng the default argument to the function.
so when form one component to another data needs to be passed, it can be done using bind function.

Function from one component to other can be passed using props.

3. FlatList: Scrollable can be used of the list is not big. Since scrollable loads the entire list and renders it,
it can cause performance issues. Instead FlatList can be used that renders only those values that are to be shown.

It has data property that asks for array on which iteration is required.
renderItem property that takes a function which return componnet that needs to be rendered.
keyExtractor property is used for getting an unique id.
It takes item and index and returns the id. For this array must have an id. If array has key then you don't need keyExtractor to spacifically
mention the unique parameter. If key is not there in array then keyExtractor is needed.




